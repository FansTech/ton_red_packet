#include "../imports/stdlib.fc";
#include "../lib/export.fc";
#include "../utils/export.fc";

#include "../router/export.fc";

#include "request.fc";
#include "storage1.fc";
#include "../utils/utils.fc";

() @claim(
int amount:u256,
slice recipient:addr,
cell recipient_uid:cell
) impure inline_ref {

    int value_remaining = fee::red_packet::claim(my_balance:coin, msg_value:coin);

    int now:u32 = now();
    if ((_packet_type:u8 == type::red_packet::multiple_average) | (_packet_type:u8 == type::red_packet::multiple_random)) {

        (
            int total_supply:u256,
            int remaining_supply:u256,
            int total_pack:u16,
            int deadline:u32
        ) = @Packet_data::de(_packet_data:cell);

        throw_unless(305, 0 < amount:u256);
        throw_unless(306, amount:u256 <= remaining_supply:u256);
        ;; throw_unless(310, now:u32 < deadline:u32);

        remaining_supply:u256 -= amount:u256;

        ;;我们不对 remaining_supply:u256 做任何保护,服务器计算不要出错!!!!
        ;;因为对于claim的红包没有deadline的限制,所以无法通过deadline来判断红包是否领完.
        ;;只有余额为空才说明真正领完,才可以执行最后的销毁合约操作
        if (remaining_supply:u256 == 0) {
            if (_state:u8 == state::red_packet::normal) {
                _state:u8 = state::red_packet::finished;
            }
            if (_state:u8 == state::red_packet::refunded_but_not_finished) {
                _state:u8 = state::red_packet::refunded_and_finished;
            }
        }

        _packet_data:cell = @Packet_data::se(
            total_supply:u256,
            remaining_supply:u256,
            total_pack:u16,
            deadline:u32
        );
    }

    ;;ask router to send token
    if ((_state:u8 == state::red_packet::finished) | (_state:u8 == state::red_packet::refunded_and_finished)) {
        send_message_ref(
            0,
            _router:addr,
            op::router::withdraw,
            query_id:u64,
            router::Withdraw::se(
                _token:addr,
                amount:u256,
                recipient:addr,
                recipient_uid:cell,
                _creator:addr,
                TRUE:u1,
                _red_packet_index:u64
            ),
            NORMAL | CARRY_ALL_BALANCE,
            TRUE:u1,
            null()
        );
    } else {
        send_message_ref(
            value_remaining + fee::router::withdraw::tx_fee(),
            _router:addr,
            op::router::withdraw,
            query_id:u64,
            router::Withdraw::se(
                _token:addr,
                amount:u256,
                recipient:addr,
                recipient_uid:cell,
                _creator:addr,
                FALSE:u1,
                _red_packet_index:u64
            ),
            PAID_EXTERNALLY,
            TRUE:u1,
            null()
        );
    }
    return ();
}
