#include "../imports/stdlib.fc";
#include "op.fc";
#include "../lib/constant.fc";

const int red_packet::storage_version = 1;

global int _code_manager_public_key:u256;
global int _storage_version:u8; ;;0
global int _code_version:u8; ;;0
;;===========================data cell===========================
global slice _router:addr;
global int _red_packet_index:u64;
;;--
global int _state:u8;
global int _packet_type:u8;
global slice _token:addr;
global slice _create:addr;
global cell _packet_data:cell;

;;================temp===================
global slice sender:addr;
global int query_id:u64;
global int my_balance:coin;
global int msg_value:coin;

;;===========================================================================
cell @Single_data::se(
int total_supply:u256,
int remaining_supply:u256
) impure {
    ~strdump("@Single_data::se");
    return begin_cell()
        .store_uint(total_supply:u256, 256)
        .store_uint(remaining_supply:u256, 256)
        .end_cell();
}

(int, int) @Single_data::de(cell input) impure {
    ~strdump("@Single_data::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(256), s~load_uint(256)
    );
}

;;===========================================================================
cell @Multiple_fix_data::se(
int total_supply:u256,
int remaining_supply:u256,
int total_pack:u16,
int remaining_pack:u16
) impure {
    ~strdump("@Multiple_fix_data::se");
    return begin_cell()
        .store_uint(total_supply:u256, 256)
        .store_uint(remaining_supply:u256, 256)
        .store_uint(total_pack:u16, 16)
        .store_uint(remaining_pack:u16, 16)
        .end_cell();
}

(int, int, int, int) @Multiple_fix_data::de(cell input) impure {
    ~strdump("@Multiple_fix_data::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(256), s~load_uint(256), s~load_uint(16), s~load_uint(16)
    );
}

;;===========================================================================
cell @Multiple_random_data::se(
int total_supply:u256,
int remaining_supply:u256,
int total_pack:u16,
int remaining_pack:u16
) impure {
    ~strdump("@Multiple_random_data::se");
    return begin_cell()
        .store_uint(total_supply:u256, 256)
        .store_uint(remaining_supply:u256, 256)
        .store_uint(total_pack:u16, 16)
        .store_uint(remaining_pack:u16, 16)
        .end_cell();
}

(int, int, int, int) @Multiple_random_data::de(cell input) impure {
    ~strdump("@Multiple_random_data::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(256), s~load_uint(256), s~load_uint(16), s~load_uint(16)
    );
}
;;=========================================================================

(cell, ()) storage_version_0->1?(cell data:cell) impure inline {

    if (_storage_version:u8 == 0) {

        ~strdump("red_packet storage1 storage_version_0->1");

        ;;update to data_version 1
        _storage_version:u8 = 1;


        ;;transfer data:cell of version 0 to that of version 1

        {
            slice data:slice = data:cell.begin_parse();

            _router:addr = data:slice~load_msg_addr();
            _red_packet_index:u64 = data:slice~load_uint(64);

            data:slice.end_parse();
        }

        ;;version 2's data cell

        cell empty:cell = begin_cell().end_cell();

        return (
            begin_cell()
                .store_slice(_router:addr)
                .store_uint(_red_packet_index:u64, 64)
                .store_uint(state::red_packet::initializing, 8) ;;_state:u8
                .store_uint(type::red_packet::unknown, 8)
                .store_slice(address_zero) ;;token
                .store_slice(address_zero) ;;creater
                .store_ref(
                    begin_cell() ;;empty packet_data:cell for initializing
                        .end_cell()
                )
                .end_cell(),
            ()
        );
    }
    ;;else, keep the storage

    return (data:cell, ());
}

(cell, ()) upgrade_storage_version(cell data:cell) impure {

    data:cell~storage_version_0->1?();

    return (data:cell, ());
}


() load_storage() impure inline_ref {

    slice root:slice = get_data().begin_parse();

    _code_manager_public_key:u256 = root:slice~load_uint(256);
    _storage_version:u8 = root:slice~load_uint(8);
    _code_version:u8 = root:slice~load_uint(8);

    cell data:cell = root:slice~load_ref();
    root:slice.end_parse();

    ;;update to latest data version
    data:cell~upgrade_storage_version();

    slice data:slice = data:cell.begin_parse();

    _router:addr = data:slice~load_msg_addr();
    _red_packet_index:u64 = data:slice~load_uint(64);

    _state:u8 = data:slice~load_int(8);
    _packet_type:u8 = data:slice~load_int(8);
    _token:addr = data:slice~load_msg_addr();
    _create:addr = data:slice~load_msg_addr();

    _packet_data:cell = data:slice~load_ref();

    data:slice.end_parse();

    throw_unless(3446, _storage_version:u8 == red_packet::storage_version);
}


() save_storage() impure inline_ref {

    set_data(
        begin_cell()
            .store_uint(_code_manager_public_key:u256, 256)
            .store_uint(_storage_version:u8, 8)
            .store_uint(_code_version:u8, 8)
        ;;====data:cell
            .store_ref(
                begin_cell()
                    .store_slice(_router:addr)
                    .store_uint(_red_packet_index:u64, 64)
                    .store_uint(_state:u8, 8)
                    .store_uint(_packet_type:u8, 8)
                    .store_slice(_token:addr)
                    .store_slice(_create:addr)
                    .store_ref(_packet_data:cell)
                    .end_cell()
            )
            .end_cell()
    );
    return ();
}
