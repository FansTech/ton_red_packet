#include "../imports/stdlib.fc";
#include "../lib/export.fc";
#include "../utils/export.fc";

#include "../router/export.fc";

#include "request.fc";
#include "storage1.fc";

() @init(
int red_packet_type:u8,
int total_pack:u16,
slice token:addr,
int amount:u256,
slice creator:addr,
int deadline:u32,
int perfee:u256
) impure inline_ref {

    int value_remaining = fee::red_packet::init(my_balance:coin, msg_value:coin);

    int now:u32 = now();

    throw_unless(112, 0 < amount:u256);
    throw_unless(116, (red_packet_type:u8 == type::red_packet::multiple_average) | (red_packet_type:u8 == type::red_packet::multiple_random));
    throw_unless(114, 1 < total_pack:u16);
    throw_unless(115, now:u32 < deadline:u32);


    _state:u8 = state::red_packet::normal;
    _packet_type:u8 = red_packet_type:u8;
    _token:addr = token:addr;
    _creator:addr = creator:addr;

    _packet_data:cell = @Packet_data::se(
        amount:u256,
        amount:u256,
        total_pack:u16,
        deadline:u32
    );

    send_message_ref(
        value_remaining + fee::router::create_finished::tx_fee(),
        _router:addr,
        op::router::create_finished,
        query_id:u64,
        router::Create_finished::se(
            _red_packet_index:u64,
            red_packet_type:u8,
            total_pack:u16,
            _token:addr,
            amount:u256,
            creator:addr,
            perfee:u256,
            deadline:u32
        ),
        PAID_EXTERNALLY,
        TRUE:u1,
        null()
    );

    return ();
}
