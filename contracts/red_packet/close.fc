#include "../imports/stdlib.fc";
#include "../lib/export.fc";
#include "../utils/export.fc";

#include "../router/export.fc";

#include "request.fc";
#include "storage1.fc";

() @close(
slice user_caller:addr,
slice refund_account:addr,
int refund_amount:u256
)
impure inline_ref {

    int value_remaining = fee::red_packet::close(my_balance:coin, msg_value:coin);

    throw_unless(312, equal_slices(
        user_caller:addr,
        _creator:addr
    ));

    int now:u32 = now();

    if ((_packet_type:u8 == type::red_packet::multiple_average) | (_packet_type:u8 == type::red_packet::multiple_random)) {
        (
            int total_supply:u256,
            int remaining_supply:u256,
            int total_pack:u16,
            int deadline:u32
        ) = @Packet_data::de(_packet_data:cell);

        throw_unless(311, deadline:u32 <= now:u32);

        remaining_supply:u256 -= refund_amount:u256;

        _packet_data:cell = @Packet_data::se(
            total_supply:u256,
            remaining_supply:u256,
            total_pack:u16,
            deadline:u32
        );

        if (remaining_supply:u256 == 0) {
            _state:u8 = state::red_packet::refunded_and_finished;
        } else {
            _state:u8 = state::red_packet::refunded_but_not_finished;
        }

    }

    ;;ask router to send token
    if (_state:u8 == state::red_packet::refunded_and_finished) {
        send_message_ref(
            0,
            _router:addr,
            op::router::refund,
            query_id:u64,
            router::Refund::se(
                _token:addr,
                refund_amount:u256,
                refund_account:addr,
                _red_packet_index:u64
            ),
            NORMAL | CARRY_ALL_BALANCE,
            TRUE:u1,
            null()
        );
    } else {
        send_message_ref(
            value_remaining + fee::router::withdraw::tx_fee(),
            _router:addr,
            op::router::refund,
            query_id:u64,
            router::Refund::se(
                _token:addr,
                refund_amount:u256,
                refund_account:addr,
                _red_packet_index:u64
            ),
            PAID_EXTERNALLY,
            TRUE:u1,
            null()
        );
    }

    return ();
}
