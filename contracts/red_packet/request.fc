#include "../imports/stdlib.fc";

cell red_packet::Init::se(
int red_packet_type:u8,
int total_pack:u16,
slice token:addr,
int amount:u256,
slice creator:addr,
int deadline:u32,
int perfee:u256
) impure {
    return begin_cell()
        .store_uint(red_packet_type:u8, 8)
        .store_uint(total_pack:u16, 16)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(creator:addr)
        .store_ref(
            begin_cell()
                .store_uint(deadline:u32, 32)
                .store_uint(perfee:u256, 256)
                .end_cell()
        )
        .end_cell();
}

(
    int, int, slice, int,
    slice, int, int
) red_packet::Init::de(cell input) impure {
    slice s = input.begin_parse();

    int red_packet_type:u8 = s~load_uint(8);
    int total_pack:u16 = s~load_uint(16);
    slice token:addr = s~load_msg_addr();
    int amount:u256 = s~load_uint(256);
    slice creator:addr = s~load_msg_addr();

    slice sub1:slice = s~load_ref().begin_parse();

    int deadline:u32 = sub1:slice~load_uint(32);
    int perfee:u256 = sub1:slice~load_uint(256);

    return (
        red_packet_type:u8, total_pack:u16, token:addr, amount:u256,
        creator:addr, deadline:u32, perfee:u256
    );
}

;;===========================================================================
cell red_packet::Claim::se(
int amount:u256,
slice recipient:addr,
cell recipient_uid:cell
) impure {
    return begin_cell()
        .store_uint(amount:u256, 256)
        .store_slice(recipient:addr)
        .store_ref(recipient_uid:cell)
        .end_cell();
}

(int, slice, cell) red_packet::Claim::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(256), s~load_msg_addr(), s~load_ref()
    );
}
;;===========================================================================
cell red_packet::Claim_server::se(
int claim_amount:u256
) impure {
    return begin_cell()
        .store_uint(claim_amount:u256, 256)
        .end_cell();
}

(int) red_packet::Claim_server::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(256)
    );
}
;;===========================================================================
cell red_packet::Close::se(
slice user_caller:addr,
slice refund_account:addr,
int refund_amount:u256
) impure {
    return begin_cell()
        .store_slice(user_caller:addr)
        .store_slice(refund_account:addr)
        .store_uint(refund_amount:u256, 256)
        .end_cell();
}

(slice, slice, int) red_packet::Close::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_msg_addr(), s~load_uint(256)
    );
}
;;===========================================================================
cell red_packet::Close_server::se(
int refund_amount:u256
) impure {
    return begin_cell()
        .store_uint(refund_amount:u256, 256)
        .end_cell();
}

(int) red_packet::Close_server::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(256)
    );
}
