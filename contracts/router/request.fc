#include "../imports/stdlib.fc";

cell router::Init::se(
slice reporter:addr,
cell red_packet_base_code:cell,
cell red_packet_deployment:cell,
slice server0:addr,
slice server1:addr,
slice server2:addr
) impure {
    ~strdump("router::Init::se");
    return begin_cell()
        .store_slice(reporter:addr)
        .store_ref(red_packet_base_code:cell)
        .store_ref(red_packet_deployment:cell)
        .store_ref(
            begin_cell()
                .store_slice(server0:addr)
                .store_slice(server1:addr)
                .store_slice(server2:addr)
                .end_cell()
        )
        .end_cell();
}

(
    slice, cell, cell, slice,
    slice, slice
) router::Init::de(cell input) impure {
    ~strdump("router::Init::de");
    slice s = input.begin_parse();

    slice reporter:addr = s~load_msg_addr();
    cell red_packet_base_code:cell = s~load_ref();
    cell red_packet_deployment:cell = s~load_ref();

    slice sub3:slice = s~load_ref().begin_parse();
    slice server0:addr = sub3:slice~load_msg_addr();
    slice server1:addr = sub3:slice~load_msg_addr();
    slice server2:addr = sub3:slice~load_msg_addr();

    return (
        reporter:addr, red_packet_base_code:cell, red_packet_deployment:cell, server0:addr,
        server1:addr, server2:addr
    );
}

;;===============================================
;;由前端se,传入transfer_notification forward_payload
cell router::Create::se(
int packet_type:u8,
cell red_packet::Init:cell
) impure {
    ~strdump("router::Create::se");
    return begin_cell()
        .store_uint(packet_type:u8, 8)
        .store_ref(red_packet::Init:cell)
        .end_cell();
}

(int, cell) router::Create::de(cell input) impure {
    ~strdump("router::Create::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(8), s~load_ref()
    );
}

;;===============================================
cell router::Create_finished::se(
int packet_type:u8,
slice token:addr,
int amount:u256,
cell red_packet_data:cell
) impure {
    ~strdump("router::Create_finished::se");
    return begin_cell()
        .store_uint(packet_type:u8, 8)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_ref(red_packet_data:cell)
        .end_cell();
}

(int, slice, int, cell) router::Create_finished::de(cell input) impure {
    ~strdump("router::Create_finished::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(8), s~load_msg_addr(), s~load_uint(256), s~load_ref()
    );
}

;;===============================================

cell router::Claim::se(
slice recipient:addr,
int red_packet_index:u64
) impure {
    ~strdump("router::Claim::se");
    return begin_cell()
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(slice, int) router::Claim::de(cell input) impure {
    ~strdump("router::Claim::de");
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_uint(64)
    );
}


;;===============================================

cell router::Withdraw::se(
slice token:addr,
int amount:u256,
slice recipient:addr,
int red_packet_index:u64
) impure {
    ~strdump("router::Withdraw::se");
    return begin_cell()
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(slice, int, slice, int) router::Withdraw::de(cell input) impure {
    ~strdump("router::Withdraw::de");
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_uint(256), s~load_msg_addr(), s~load_uint(64)
    );
}

;;===============================================

cell router::Close::se(
int red_packet_index:u64
) impure {
    ~strdump("router::Close::se");
    return begin_cell()
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(int) router::Close::de(cell input) impure {
    ~strdump("router::Close::de");
    slice s = input.begin_parse();
    return (
        s~load_uint(64)
    );
}

;;===============================================

cell router::Refund::se(
slice token:addr,
int amount:u256,
slice recipient:addr,
int red_packet_index:u64
) impure {
    ~strdump("router::Refund::se");
    return begin_cell()
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(slice, int, slice, int) router::Refund::de(cell input) impure {
    ~strdump("router::Refund::de");
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_uint(256), s~load_msg_addr(), s~load_uint(64)
    );
}
