#include "../imports/stdlib.fc";

cell router::Init::se(
slice reporter:addr,
cell red_packet_base_code:cell,
cell red_packet_deployment:cell,
int server_public_key:u256,
slice server:addr
) impure {
    return begin_cell()
        .store_slice(reporter:addr)
        .store_ref(red_packet_base_code:cell)
        .store_ref(red_packet_deployment:cell)
        .store_uint(server_public_key:u256, 256)
        .store_slice(server:addr)
        .end_cell();
}

(
    slice, cell, cell, int,
    slice
) router::Init::de(cell input) impure {
    slice s = input.begin_parse();

    slice reporter:addr = s~load_msg_addr();
    cell red_packet_base_code:cell = s~load_ref();
    cell red_packet_deployment:cell = s~load_ref();
    int server_public_key:u256 = s~load_uint(256);
    slice server:addr = s~load_msg_addr();

    return (
        reporter:addr, red_packet_base_code:cell, red_packet_deployment:cell, server_public_key:u256,
        server:addr
    );
}

;;===============================================
;;由前端se,传入transfer_notification forward_payload
cell router::Create::se(
int packet_index:u64,
int packet_type:u8,
cell red_packet::Init:cell,
cell create_server_check:cell,
int uid:u64,
cell signature:cell
) impure {
    return begin_cell()
        .store_uint(packet_index:u64, 64)
        .store_uint(packet_type:u8, 8)
        .store_ref(red_packet::Init:cell)
        .store_ref(create_server_check:cell)
        .store_uint(uid:u64, 64)
        .store_ref(signature:cell)
        .end_cell();
}

(
    int, int, cell, cell,
    int, cell
) router::Create::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(64), s~load_uint(8), s~load_ref(), s~load_ref(),
        s~load_uint(64), s~load_ref()
    );
}

;;===============================================

cell router::Create_check::se(
slice jetton_user_wallet:addr,
slice router:addr,
int red_packet_index:u64,
int red_packet_type:u8,
int red_packet_supply::u256,
int red_packet_pack:u16,
int red_packet_deadline:u32,
int uid:u64
) impure {
    return begin_cell()
        .store_slice(jetton_user_wallet:addr)
        .store_slice(router:addr)
        .store_uint(red_packet_index:u64, 64)
        .store_uint(red_packet_type:u8, 8)
        .store_uint(red_packet_supply::u256, 256)
        .store_uint(red_packet_pack:u16, 16)
        .store_uint(red_packet_deadline:u32, 32)
        .store_uint(uid:u64, 64)
        .end_cell();
}

(
    slice, slice, int, int,
    int, int, int, int
) router::Create_check::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_msg_addr(), s~load_uint(64), s~load_uint(8),
        s~load_uint(256), s~load_uint(16), s~load_uint(32), s~load_uint(64)
    );
}

;;===============================================
cell router::Create_finished::se(
int uid:u64,
int packet_type:u8,
slice token:addr,
int amount:u256,
int packet_index:u64,
slice creator:addr,
cell red_packet_data:cell
) impure {
    return begin_cell()
        .store_uint(uid:u64, 64)
        .store_uint(packet_type:u8, 8)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_uint(packet_index:u64, 64)
        .store_slice(creator:addr)
        .store_ref(red_packet_data:cell)
        .end_cell();
}

(
    int, int, slice, int,
    int, slice, cell
) router::Create_finished::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(64), s~load_uint(8), s~load_msg_addr(), s~load_uint(256),
        s~load_uint(64), s~load_msg_addr(), s~load_ref()
    );
}

;;===============================================

cell router::Claim::se(
slice recipient:addr,
int red_packet_index:u64,
int uid:u64,
cell red_packet::Claim_server:cell
) impure {
    return begin_cell()
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .store_uint(uid:u64, 64)
        .store_ref(red_packet::Claim_server:cell)
        .end_cell();
}

(slice, int, int, cell) router::Claim::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_msg_addr(), s~load_uint(64), s~load_uint(64), s~load_ref()
    );
}


;;===============================================

cell router::Withdraw::se(
int uid:u64,
slice token:addr,
int amount:u256,
slice recipient:addr,
int red_packet_index:u64
) impure {
    return begin_cell()
        .store_uint(uid:u64, 64)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(
    int, slice, int, slice,
    int
) router::Withdraw::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(64), s~load_msg_addr(), s~load_uint(256), s~load_msg_addr(),
        s~load_uint(64)
    );
}

;;===============================================

cell router::Close::se(
int red_packet_index:u64,
int uid:u64,
cell red_packet::Claim_server:cell,
cell signature:cell
) impure {
    return begin_cell()
        .store_uint(red_packet_index:u64, 64)
        .store_uint(uid:u64, 64)
        .store_ref(red_packet::Claim_server:cell)
        .store_ref(signature:cell)
        .end_cell();
}

(int, int, cell, cell) router::Close::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(64), s~load_uint(64), s~load_ref(), s~load_ref()
    );
}

;;===============================================

cell router::Refund::se(
int uid:u64,
slice token:addr,
int amount:u256,
slice recipient:addr,
int red_packet_index:u64
) impure {
    return begin_cell()
        .store_uint(uid:u64, 64)
        .store_slice(token:addr)
        .store_uint(amount:u256, 256)
        .store_slice(recipient:addr)
        .store_uint(red_packet_index:u64, 64)
        .end_cell();
}

(
    int, slice, int, slice,
    int
) router::Refund::de(cell input) impure {
    slice s = input.begin_parse();
    return (
        s~load_uint(64), s~load_msg_addr(), s~load_uint(256), s~load_msg_addr(),
        s~load_uint(64)
    );
}
